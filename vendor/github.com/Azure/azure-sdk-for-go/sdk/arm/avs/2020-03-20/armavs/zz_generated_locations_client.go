// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armavs

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"net/url"
	"strings"
)

// LocationsClient contains the methods for the Locations group.
// Don't use this type directly, use NewLocationsClient() instead.
type LocationsClient struct {
	con            *armcore.Connection
	subscriptionID string
}

// NewLocationsClient creates a new instance of LocationsClient with the specified values.
func NewLocationsClient(con *armcore.Connection, subscriptionID string) *LocationsClient {
	return &LocationsClient{con: con, subscriptionID: subscriptionID}
}

// CheckQuotaAvailability - Return quota for subscription by region
func (client *LocationsClient) CheckQuotaAvailability(ctx context.Context, location string, options *LocationsCheckQuotaAvailabilityOptions) (QuotaResponse, error) {
	req, err := client.checkQuotaAvailabilityCreateRequest(ctx, location, options)
	if err != nil {
		return QuotaResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return QuotaResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return QuotaResponse{}, client.checkQuotaAvailabilityHandleError(resp)
	}
	return client.checkQuotaAvailabilityHandleResponse(resp)
}

// checkQuotaAvailabilityCreateRequest creates the CheckQuotaAvailability request.
func (client *LocationsClient) checkQuotaAvailabilityCreateRequest(ctx context.Context, location string, options *LocationsCheckQuotaAvailabilityOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AVS/locations/{location}/checkQuotaAvailability"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2020-03-20")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// checkQuotaAvailabilityHandleResponse handles the CheckQuotaAvailability response.
func (client *LocationsClient) checkQuotaAvailabilityHandleResponse(resp *azcore.Response) (QuotaResponse, error) {
	var val *Quota
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return QuotaResponse{}, err
	}
	return QuotaResponse{RawResponse: resp.Response, Quota: val}, nil
}

// checkQuotaAvailabilityHandleError handles the CheckQuotaAvailability error response.
func (client *LocationsClient) checkQuotaAvailabilityHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}

// CheckTrialAvailability - Return trial status for subscription by region
func (client *LocationsClient) CheckTrialAvailability(ctx context.Context, location string, options *LocationsCheckTrialAvailabilityOptions) (TrialResponse, error) {
	req, err := client.checkTrialAvailabilityCreateRequest(ctx, location, options)
	if err != nil {
		return TrialResponse{}, err
	}
	resp, err := client.con.Pipeline().Do(req)
	if err != nil {
		return TrialResponse{}, err
	}
	if !resp.HasStatusCode(http.StatusOK) {
		return TrialResponse{}, client.checkTrialAvailabilityHandleError(resp)
	}
	return client.checkTrialAvailabilityHandleResponse(resp)
}

// checkTrialAvailabilityCreateRequest creates the CheckTrialAvailability request.
func (client *LocationsClient) checkTrialAvailabilityCreateRequest(ctx context.Context, location string, options *LocationsCheckTrialAvailabilityOptions) (*azcore.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/providers/Microsoft.AVS/locations/{location}/checkTrialAvailability"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if location == "" {
		return nil, errors.New("parameter location cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{location}", url.PathEscape(location))
	req, err := azcore.NewRequest(ctx, http.MethodPost, azcore.JoinPaths(client.con.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	req.Telemetry(telemetryInfo)
	reqQP := req.URL.Query()
	reqQP.Set("api-version", "2020-03-20")
	req.URL.RawQuery = reqQP.Encode()
	req.Header.Set("Accept", "application/json")
	return req, nil
}

// checkTrialAvailabilityHandleResponse handles the CheckTrialAvailability response.
func (client *LocationsClient) checkTrialAvailabilityHandleResponse(resp *azcore.Response) (TrialResponse, error) {
	var val *Trial
	if err := resp.UnmarshalAsJSON(&val); err != nil {
		return TrialResponse{}, err
	}
	return TrialResponse{RawResponse: resp.Response, Trial: val}, nil
}

// checkTrialAvailabilityHandleError handles the CheckTrialAvailability error response.
func (client *LocationsClient) checkTrialAvailabilityHandleError(resp *azcore.Response) error {
	var err CloudError
	if err := resp.UnmarshalAsJSON(&err); err != nil {
		return err
	}
	return azcore.NewResponseError(&err, resp.Response)
}
