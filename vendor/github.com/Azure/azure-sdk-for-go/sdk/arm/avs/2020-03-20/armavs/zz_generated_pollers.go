// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armavs

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/armcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"net/http"
	"time"
)

// ClusterPoller provides polling facilities until the operation reaches a terminal state.
type ClusterPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ClusterResponse will be returned.
	FinalResponse(ctx context.Context) (ClusterResponse, error)
}

type clusterPoller struct {
	pipeline azcore.Pipeline
	pt       armcore.Poller
}

func (p *clusterPoller) Done() bool {
	return p.pt.Done()
}

func (p *clusterPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx, p.pipeline)
}

func (p *clusterPoller) FinalResponse(ctx context.Context) (ClusterResponse, error) {
	respType := ClusterResponse{Cluster: &Cluster{}}
	resp, err := p.pt.FinalResponse(ctx, p.pipeline, respType.Cluster)
	if err != nil {
		return ClusterResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *clusterPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *clusterPoller) pollUntilDone(ctx context.Context, frequency time.Duration) (ClusterResponse, error) {
	respType := ClusterResponse{Cluster: &Cluster{}}
	resp, err := p.pt.PollUntilDone(ctx, frequency, p.pipeline, respType.Cluster)
	if err != nil {
		return ClusterResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// ExpressRouteAuthorizationPoller provides polling facilities until the operation reaches a terminal state.
type ExpressRouteAuthorizationPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final ExpressRouteAuthorizationResponse will be returned.
	FinalResponse(ctx context.Context) (ExpressRouteAuthorizationResponse, error)
}

type expressRouteAuthorizationPoller struct {
	pipeline azcore.Pipeline
	pt       armcore.Poller
}

func (p *expressRouteAuthorizationPoller) Done() bool {
	return p.pt.Done()
}

func (p *expressRouteAuthorizationPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx, p.pipeline)
}

func (p *expressRouteAuthorizationPoller) FinalResponse(ctx context.Context) (ExpressRouteAuthorizationResponse, error) {
	respType := ExpressRouteAuthorizationResponse{ExpressRouteAuthorization: &ExpressRouteAuthorization{}}
	resp, err := p.pt.FinalResponse(ctx, p.pipeline, respType.ExpressRouteAuthorization)
	if err != nil {
		return ExpressRouteAuthorizationResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *expressRouteAuthorizationPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *expressRouteAuthorizationPoller) pollUntilDone(ctx context.Context, frequency time.Duration) (ExpressRouteAuthorizationResponse, error) {
	respType := ExpressRouteAuthorizationResponse{ExpressRouteAuthorization: &ExpressRouteAuthorization{}}
	resp, err := p.pt.PollUntilDone(ctx, frequency, p.pipeline, respType.ExpressRouteAuthorization)
	if err != nil {
		return ExpressRouteAuthorizationResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

// HTTPPoller provides polling facilities until the operation reaches a terminal state.
type HTTPPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final *http.Response will be returned.
	FinalResponse(ctx context.Context) (*http.Response, error)
}

type httpPoller struct {
	pipeline azcore.Pipeline
	pt       armcore.Poller
}

func (p *httpPoller) Done() bool {
	return p.pt.Done()
}

func (p *httpPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx, p.pipeline)
}

func (p *httpPoller) FinalResponse(ctx context.Context) (*http.Response, error) {
	return p.pt.FinalResponse(ctx, p.pipeline, nil)
}

func (p *httpPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *httpPoller) pollUntilDone(ctx context.Context, frequency time.Duration) (*http.Response, error) {
	return p.pt.PollUntilDone(ctx, frequency, p.pipeline, nil)
}

// PrivateCloudPoller provides polling facilities until the operation reaches a terminal state.
type PrivateCloudPoller interface {
	azcore.Poller
	// FinalResponse performs a final GET to the service and returns the final response
	// for the polling operation. If there is an error performing the final GET then an error is returned.
	// If the final GET succeeded then the final PrivateCloudResponse will be returned.
	FinalResponse(ctx context.Context) (PrivateCloudResponse, error)
}

type privateCloudPoller struct {
	pipeline azcore.Pipeline
	pt       armcore.Poller
}

func (p *privateCloudPoller) Done() bool {
	return p.pt.Done()
}

func (p *privateCloudPoller) Poll(ctx context.Context) (*http.Response, error) {
	return p.pt.Poll(ctx, p.pipeline)
}

func (p *privateCloudPoller) FinalResponse(ctx context.Context) (PrivateCloudResponse, error) {
	respType := PrivateCloudResponse{PrivateCloud: &PrivateCloud{}}
	resp, err := p.pt.FinalResponse(ctx, p.pipeline, respType.PrivateCloud)
	if err != nil {
		return PrivateCloudResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}

func (p *privateCloudPoller) ResumeToken() (string, error) {
	return p.pt.ResumeToken()
}

func (p *privateCloudPoller) pollUntilDone(ctx context.Context, frequency time.Duration) (PrivateCloudResponse, error) {
	respType := PrivateCloudResponse{PrivateCloud: &PrivateCloud{}}
	resp, err := p.pt.PollUntilDone(ctx, frequency, p.pipeline, respType.PrivateCloud)
	if err != nil {
		return PrivateCloudResponse{}, err
	}
	respType.RawResponse = resp
	return respType, nil
}
