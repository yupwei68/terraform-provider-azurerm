// +build go1.13

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armavs

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// ClusterListPager provides iteration over ClusterList pages.
type ClusterListPager interface {
	azcore.Pager

	// Page returns the current ClusterListResponse.
	PageResponse() ClusterListResponse
}

type clusterListCreateRequest func(context.Context) (*azcore.Request, error)

type clusterListHandleError func(*azcore.Response) error

type clusterListHandleResponse func(*azcore.Response) (ClusterListResponse, error)

type clusterListAdvancePage func(context.Context, ClusterListResponse) (*azcore.Request, error)

type clusterListPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester clusterListCreateRequest
	// callback for handling response errors
	errorer clusterListHandleError
	// callback for handling the HTTP response
	responder clusterListHandleResponse
	// callback for advancing to the next page
	advancer clusterListAdvancePage
	// contains the current response
	current ClusterListResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *clusterListPager) Err() error {
	return p.err
}

func (p *clusterListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ClusterList.NextLink == nil || len(*p.current.ClusterList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *clusterListPager) PageResponse() ClusterListResponse {
	return p.current
}

// ExpressRouteAuthorizationListPager provides iteration over ExpressRouteAuthorizationList pages.
type ExpressRouteAuthorizationListPager interface {
	azcore.Pager

	// Page returns the current ExpressRouteAuthorizationListResponse.
	PageResponse() ExpressRouteAuthorizationListResponse
}

type expressRouteAuthorizationListCreateRequest func(context.Context) (*azcore.Request, error)

type expressRouteAuthorizationListHandleError func(*azcore.Response) error

type expressRouteAuthorizationListHandleResponse func(*azcore.Response) (ExpressRouteAuthorizationListResponse, error)

type expressRouteAuthorizationListAdvancePage func(context.Context, ExpressRouteAuthorizationListResponse) (*azcore.Request, error)

type expressRouteAuthorizationListPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester expressRouteAuthorizationListCreateRequest
	// callback for handling response errors
	errorer expressRouteAuthorizationListHandleError
	// callback for handling the HTTP response
	responder expressRouteAuthorizationListHandleResponse
	// callback for advancing to the next page
	advancer expressRouteAuthorizationListAdvancePage
	// contains the current response
	current ExpressRouteAuthorizationListResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *expressRouteAuthorizationListPager) Err() error {
	return p.err
}

func (p *expressRouteAuthorizationListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.ExpressRouteAuthorizationList.NextLink == nil || len(*p.current.ExpressRouteAuthorizationList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *expressRouteAuthorizationListPager) PageResponse() ExpressRouteAuthorizationListResponse {
	return p.current
}

// HcxEnterpriseSiteListPager provides iteration over HcxEnterpriseSiteList pages.
type HcxEnterpriseSiteListPager interface {
	azcore.Pager

	// Page returns the current HcxEnterpriseSiteListResponse.
	PageResponse() HcxEnterpriseSiteListResponse
}

type hcxEnterpriseSiteListCreateRequest func(context.Context) (*azcore.Request, error)

type hcxEnterpriseSiteListHandleError func(*azcore.Response) error

type hcxEnterpriseSiteListHandleResponse func(*azcore.Response) (HcxEnterpriseSiteListResponse, error)

type hcxEnterpriseSiteListAdvancePage func(context.Context, HcxEnterpriseSiteListResponse) (*azcore.Request, error)

type hcxEnterpriseSiteListPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester hcxEnterpriseSiteListCreateRequest
	// callback for handling response errors
	errorer hcxEnterpriseSiteListHandleError
	// callback for handling the HTTP response
	responder hcxEnterpriseSiteListHandleResponse
	// callback for advancing to the next page
	advancer hcxEnterpriseSiteListAdvancePage
	// contains the current response
	current HcxEnterpriseSiteListResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *hcxEnterpriseSiteListPager) Err() error {
	return p.err
}

func (p *hcxEnterpriseSiteListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.HcxEnterpriseSiteList.NextLink == nil || len(*p.current.HcxEnterpriseSiteList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *hcxEnterpriseSiteListPager) PageResponse() HcxEnterpriseSiteListResponse {
	return p.current
}

// OperationListPager provides iteration over OperationList pages.
type OperationListPager interface {
	azcore.Pager

	// Page returns the current OperationListResponse.
	PageResponse() OperationListResponse
}

type operationListCreateRequest func(context.Context) (*azcore.Request, error)

type operationListHandleError func(*azcore.Response) error

type operationListHandleResponse func(*azcore.Response) (OperationListResponse, error)

type operationListAdvancePage func(context.Context, OperationListResponse) (*azcore.Request, error)

type operationListPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester operationListCreateRequest
	// callback for handling response errors
	errorer operationListHandleError
	// callback for handling the HTTP response
	responder operationListHandleResponse
	// callback for advancing to the next page
	advancer operationListAdvancePage
	// contains the current response
	current OperationListResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *operationListPager) Err() error {
	return p.err
}

func (p *operationListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.OperationList.NextLink == nil || len(*p.current.OperationList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *operationListPager) PageResponse() OperationListResponse {
	return p.current
}

// PrivateCloudListPager provides iteration over PrivateCloudList pages.
type PrivateCloudListPager interface {
	azcore.Pager

	// Page returns the current PrivateCloudListResponse.
	PageResponse() PrivateCloudListResponse
}

type privateCloudListCreateRequest func(context.Context) (*azcore.Request, error)

type privateCloudListHandleError func(*azcore.Response) error

type privateCloudListHandleResponse func(*azcore.Response) (PrivateCloudListResponse, error)

type privateCloudListAdvancePage func(context.Context, PrivateCloudListResponse) (*azcore.Request, error)

type privateCloudListPager struct {
	// the pipeline for making the request
	pipeline azcore.Pipeline
	// creates the initial request (non-LRO case)
	requester privateCloudListCreateRequest
	// callback for handling response errors
	errorer privateCloudListHandleError
	// callback for handling the HTTP response
	responder privateCloudListHandleResponse
	// callback for advancing to the next page
	advancer privateCloudListAdvancePage
	// contains the current response
	current PrivateCloudListResponse
	// status codes for successful retrieval
	statusCodes []int
	// any error encountered
	err error
}

func (p *privateCloudListPager) Err() error {
	return p.err
}

func (p *privateCloudListPager) NextPage(ctx context.Context) bool {
	var req *azcore.Request
	var err error
	if !reflect.ValueOf(p.current).IsZero() {
		if p.current.PrivateCloudList.NextLink == nil || len(*p.current.PrivateCloudList.NextLink) == 0 {
			return false
		}
		req, err = p.advancer(ctx, p.current)
	} else {
		req, err = p.requester(ctx)
	}
	if err != nil {
		p.err = err
		return false
	}
	resp, err := p.pipeline.Do(req)
	if err != nil {
		p.err = err
		return false
	}
	if !resp.HasStatusCode(p.statusCodes...) {
		p.err = p.errorer(resp)
		return false
	}
	result, err := p.responder(resp)
	if err != nil {
		p.err = err
		return false
	}
	p.current = result
	return true
}

func (p *privateCloudListPager) PageResponse() PrivateCloudListResponse {
	return p.current
}
